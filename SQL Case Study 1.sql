create database casestudy1
use casestudy1

/* 1. Display the number of states present in the LocationTable. */
SELECT COUNT(State)
FROM LocationTable

/* 2. How many products are of regular type? */
SELECT COUNT(Product)
FROM ProductTable
WHERE Type = 'Regular'

/* 3. How much spending has been done on marketing of product ID 1? */
SELECT SUM(Total_Expenses)
FROM FactTable
WHERE ProductId = 1;

/* 4. What is the minimum sales of a product? */
SELECT MIN(Sales) ,Product
FROM FactTable f
INNER JOIN ProductTable p ON f.ProductId = p.ProductId
GROUP BY Product

/* 5. Display the max Cost of Good Sold (COGS). */
SELECT MAX(COGS)
FROM FactTable

/* 6. Display the details of the product ID where product type is coffee. */
SELECT * 
FROM FactTable f
INNER JOIN ProductTable p ON f.ProductId = p.ProductId
INNER JOIN  LocationTable l ON l. Area_code = f.Area_code
WHERE Product_Type = 'Coffee';

/* 7. Display the details where total expenses are greater than 40. */
SELECT *
FROM FactTable
WHERE Total_Expenses > 40;

/* 8. What is the average sales in area code 719? */
SELECT AVG(Sales) AVERAGE_SALES
FROM FactTable
WHERE Area_Code = 719;

/* 9. Find out the total profit generated by Colorado state. */
SELECT SUM(Profit) Total_Profit
FROM  FactTable f
INNER JOIN LocationTable l  ON l. Area_code = f.Area_code
WHERE State = 'Colorado';

/*10. Display the average inventory for each product ID.*/
SELECT AVG(Inventory) 
FROM FactTable
GROUP BY ProductId;

/* 11. Display state in a sequential order in a LocationTable. */
SELECT DISTINCT(State)
FROM LocationTable
ORDER BY State;

/* 12. Display the average budget margin where the average budget margin
should be greater than 100.*/
SELECT AVG(Budget_Margin) Average_Buget_Margin, ProductID 
FROM FactTable
GROUP BY ProductId
HAVING AVG(Budget_Margin) > 100;

/* 13. What is the total sales done on date 2010-01-01? */
SELECT SUM(Sales)
FROM FactTable
WHERE Date='2010-01-01';

/* 14. Display the average total expense of each product ID on an individual
date. */
SELECT AVG(Total_Expenses) Average_of_Total_expenses ,ProductId, Date
FROM FactTable
GROUP BY Date, ProductId
ORDER BY Date;  

/* 15. Display the table with the following attributes such asdate, product ID, product_type, product, sales, profit, state, area_code. */
SELECT f.Date, f.ProductID, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, f.Area_code
FROM FactTable f
INNER JOIN LocationTable l ON l. Area_code = f.Area_code
INNER JOIN ProductTable p ON p. ProductId = f.ProductId;

/* 16. Display the rank without any gap to show the sales wise rank. */
SELECT Sales, DENSE_RANK () Over(ORDER BY Sales Desc) AS Sales_Rank
FROM FactTable  

/* 17. Find the state wise profit and sales. */ 
SELECT l.State ,SUM (f.Profit) AS PROFIT, SUM(f.Sales) AS SALES, 
FROM FactTable f
INNER JOIN LocationTable l ON l.Area_code= f.Area_code
GROUP BY l.state;

/* 18. Find the state wise profit and sales along with the product name. */
SELECT l.State, p.Product,SUM (f.Profit) AS PROFIT, SUM(f.Sales) AS SALES
FROM FactTable f
INNER JOIN LocationTable l ON l.Area_code= f.Area_code
INNER JOIN ProductTable p ON p.ProductId = f.ProductId
GROUP BY l.state, p.Product;

/* 19. If there is an increase in sales of 5%, calculate the increased sales. */
SELECT Sales, Sales*1.05
FROM FactTable

/* 20. Find the maximum profit along with the product ID and product type. */
SELECT MAX(f.Profit), p.ProductId, p.Product_Type
FROM ProductTable p
INNER JOIN FactTable f ON f.ProductId = p.ProductId
GROUP BY p.ProductId, p.Product_Type

SELECT f.Profit , p.ProductId, p.Product_Type
FROM FactTable f
INNER JOIN ProductTable p  ON f.ProductID = p.ProductID
WHERE PROFIT = (SELECT MAX(PROFIT) FROM FactTable);

/* 21. Create a stored procedure to fetch the result according to the product
type from ProductTable. */
CREATE PROCEDURE ProductType @val varchar(20)
AS
	SELECT * FROM ProductTable WHERE Product_Type = @val
GO

Exec ProductType @val = 'Coffee';

/* 22. Write a query by creating a condition in which if the total expenses is
less than 60 then it is a profit or else loss. */
SELECT Total_Expenses, IIF(Total_Expenses < 60, 'Profit', 'Loss') AS Profit_loss
FROM FactTable
ORDER BY Total_Expenses

/* 23. Give the total weekly sales value with the date and product ID details.
Use roll-up to pull the data in hierarchical order. */
CREATE VIEW WEEKLYSALES
SELECT SUM(Sales) x, ProductId y, DATENAME(week, Date) z
FROM FactTable
GROUP BY ROLLUP((DATENAME(week, Date)), ProductId);

select * from weeklysales

/* 24. Apply union and intersection operator on the tables which consist of
attribute area code. */
SELECT Area_Code
FROM LocationTable
UNION
SELECT Area_Code
FROM FactTable

SELECT Area_Code
FROM LocationTable
INTERSECT
SELECT Area_Code
FROM FactTable

/* 25. Create a user-defined function for the product table to fetch a particular
product type based upon the userï¿½s preference. */
CREATE FUNCTION FETCH_PRODUCT_TYPE(@Product_Type AS VARCHAR(20))
RETURNS TABLE
AS
RETURN
(
    SELECT Product_Type FROM ProductTable WHERE Product_Type = @Product_Type
)

SELECT * FROM FETCH_PRODUCT_TYPE('Regular');

/* 26. Change the product type from coffee to tea where product ID is 1 and
undo it. */
BEGIN TRANSACTION
UPDATE ProductTable SET Product_Type = 'Tea' WHERE ProductId =1 AND Product_Type= 'coffee';
ROLLBACK TRANSACTION

/* 27. Display the date, product ID and sales where total expenses are
between 100 to 200. */
SELECT Date, ProductId, Sales
FROM FactTable
WHERE Total_expenses BETWEEN 100 AND 200;

/* 28. Delete the records in the ProductTable for regular type. */
BEGIN TRANSACTION 
DELETE FROM ProductTable WHERE Type = 'Regular'
ROLLBACK TRANSACTION

/* 29. Display the ASCII value of the fifth character from the column Product. */
SELECT ASCII((SUBSTRING(Product,3,5))) AS ASCIIVALUE
FROM ProductTable